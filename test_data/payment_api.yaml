openapi: 3.0.0
info:
  title: Payment Processing API
  version: 2.1.0
  description: |
    A comprehensive payment processing API that handles various payment methods,
    transactions, and financial operations. This API supports credit cards,
    digital wallets, and bank transfers.
  contact:
    name: Payment API Support
    email: payments@example.com
    url: https://developer.example.com/payments
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://api.payments.example.com/v2
    description: Production server
  - url: https://sandbox-api.payments.example.com/v2
    description: Sandbox server for testing

security:
  - apiKey: []
  - oauth2: ["read:payments", "write:payments"]

tags:
  - name: payments
    description: Payment processing operations
  - name: customers
    description: Customer management
  - name: webhooks
    description: Webhook configuration and management
  - name: refunds
    description: Refund and chargeback operations

paths:
  /customers:
    post:
      tags: [customers]
      summary: Create a new customer
      description: Register a new customer in the payment system
      operationId: createCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
            example:
              name: "John Smith"
              email: "john@example.com"
              phone: "+1-555-0123"
              address:
                street: "123 Main St"
                city: "Anytown"
                state: "CA"
                zipCode: "12345"
                country: "US"
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Customer already exists
      security:
        - apiKey: []

  /customers/{customerId}:
    get:
      tags: [customers]
      summary: Get customer details
      description: Retrieve detailed information about a specific customer
      operationId: getCustomer
      parameters:
        - name: customerId
          in: path
          required: true
          description: Unique customer identifier
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - apiKey: []

  /payments:
    post:
      tags: [payments]
      summary: Process a payment
      description: |
        Process a payment transaction. Supports multiple payment methods including
        credit cards, debit cards, and digital wallets.
      operationId: processPayment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
            examples:
              creditCard:
                summary: Credit card payment
                value:
                  amount: 2999
                  currency: "USD"
                  customerId: "cust_123456789"
                  paymentMethod:
                    type: "credit_card"
                    card:
                      number: "4111111111111111"
                      expMonth: 12
                      expYear: 2025
                      cvc: "123"
                  description: "Online purchase"
              digitalWallet:
                summary: Digital wallet payment
                value:
                  amount: 1500
                  currency: "USD"
                  customerId: "cust_987654321"
                  paymentMethod:
                    type: "digital_wallet"
                    walletType: "apple_pay"
                    token: "wallet_token_abc123"
      responses:
        '200':
          description: Payment processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          description: Payment declined
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentError'
        '422':
          description: Invalid payment data
      security:
        - apiKey: []
        - oauth2: ["write:payments"]

    get:
      tags: [payments]
      summary: List payments
      description: Retrieve a list of payments with optional filtering
      operationId: listPayments
      parameters:
        - name: customerId
          in: query
          description: Filter by customer ID
          schema:
            type: string
        - name: status
          in: query
          description: Filter by payment status
          schema:
            type: string
            enum: [pending, completed, failed, refunded]
        - name: startDate
          in: query
          description: Start date for date range filter (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: End date for date range filter (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          description: Maximum number of results to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of payments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentList'
        '400':
          $ref: '#/components/responses/BadRequest'
      security:
        - apiKey: []
        - oauth2: ["read:payments"]

  /payments/{paymentId}:
    get:
      tags: [payments]
      summary: Get payment details
      description: Retrieve detailed information about a specific payment
      operationId: getPayment
      parameters:
        - name: paymentId
          in: path
          required: true
          description: Unique payment identifier
          schema:
            type: string
      responses:
        '200':
          description: Payment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - apiKey: []

  /payments/{paymentId}/refund:
    post:
      tags: [refunds]
      summary: Refund a payment
      description: Process a full or partial refund for a completed payment
      operationId: refundPayment
      parameters:
        - name: paymentId
          in: path
          required: true
          description: Payment ID to refund
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
      responses:
        '200':
          description: Refund processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Payment cannot be refunded
      security:
        - apiKey: []
        - oauth2: [write:payments]

  /webhooks:
    post:
      tags: [webhooks]
      summary: Create webhook endpoint
      description: Register a new webhook endpoint to receive payment notifications
      operationId: createWebhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookRequest'
      responses:
        '201':
          description: Webhook created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          $ref: '#/components/responses/BadRequest'
      security:
        - apiKey: []

components:
  schemas:
    Customer:
      type: object
      description: Customer information and account details
      properties:
        id:
          type: string
          format: uuid
          description: Unique customer identifier
        name:
          type: string
          description: Customer full name
        email:
          type: string
          format: email
          description: Customer email address
        phone:
          type: string
          description: Customer phone number
        address:
          $ref: '#/components/schemas/Address'
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
        status:
          type: string
          enum: [active, inactive, suspended]
          description: Customer account status
      required: [id, name, email, createdAt, status]

    CreateCustomerRequest:
      type: object
      description: Request to create a new customer
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        email:
          type: string
          format: email
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
        address:
          $ref: '#/components/schemas/Address'
      required: [name, email]

    Address:
      type: object
      description: Physical address information
      properties:
        street:
          type: string
          description: Street address
        city:
          type: string
          description: City name
        state:
          type: string
          description: State or province
        zipCode:
          type: string
          description: Postal code
        country:
          type: string
          minLength: 2
          maxLength: 2
          description: Two-letter country code (ISO 3166-1 alpha-2)
      required: [street, city, country]

    PaymentRequest:
      type: object
      description: Payment processing request
      properties:
        amount:
          type: integer
          minimum: 1
          description: Payment amount in smallest currency unit (e.g., cents)
        currency:
          type: string
          minLength: 3
          maxLength: 3
          description: Three-letter currency code (ISO 4217)
        customerId:
          type: string
          description: Customer identifier
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        description:
          type: string
          maxLength: 500
          description: Payment description
        metadata:
          type: object
          description: Additional metadata for the payment
          additionalProperties:
            type: string
      required: [amount, currency, customerId, paymentMethod]

    PaymentMethod:
      type: object
      description: Payment method details
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
          enum: [credit_card, debit_card, digital_wallet, bank_transfer]
      required: [type]

    CreditCardPayment:
      allOf:
        - $ref: '#/components/schemas/PaymentMethod'
        - type: object
          properties:
            card:
              $ref: '#/components/schemas/CreditCard'
          required: [card]

    CreditCard:
      type: object
      description: Credit card information
      properties:
        number:
          type: string
          pattern: '^[0-9]{13,19}$'
          description: Card number (digits only)
        expMonth:
          type: integer
          minimum: 1
          maximum: 12
          description: Expiration month
        expYear:
          type: integer
          minimum: 2023
          description: Expiration year
        cvc:
          type: string
          pattern: '^[0-9]{3,4}$'
          description: Card verification code
        holderName:
          type: string
          description: Cardholder name
      required: [number, expMonth, expYear, cvc]

    PaymentResponse:
      type: object
      description: Payment processing result
      properties:
        id:
          type: string
          description: Unique payment identifier
        status:
          type: string
          enum: [pending, completed, failed]
          description: Payment status
        amount:
          type: integer
          description: Payment amount
        currency:
          type: string
          description: Payment currency
        customerId:
          type: string
          description: Customer identifier
        createdAt:
          type: string
          format: date-time
          description: Payment creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        description:
          type: string
          description: Payment description
        metadata:
          type: object
          additionalProperties:
            type: string
      required: [id, status, amount, currency, customerId, createdAt]

    PaymentList:
      type: object
      description: Paginated list of payments
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PaymentResponse'
        pagination:
          $ref: '#/components/schemas/Pagination'
      required: [data, pagination]

    Pagination:
      type: object
      description: Pagination information
      properties:
        total:
          type: integer
          description: Total number of items
        limit:
          type: integer
          description: Maximum items per page
        offset:
          type: integer
          description: Number of items skipped
        hasMore:
          type: boolean
          description: Whether more items are available
      required: [total, limit, offset, hasMore]

    RefundRequest:
      type: object
      description: Refund processing request
      properties:
        amount:
          type: integer
          minimum: 1
          description: Refund amount (optional for full refund)
        reason:
          type: string
          enum: [duplicate, fraudulent, requested_by_customer, other]
          description: Reason for refund
        description:
          type: string
          maxLength: 500
          description: Additional refund details
      required: [reason]

    RefundResponse:
      type: object
      description: Refund processing result
      properties:
        id:
          type: string
          description: Unique refund identifier
        paymentId:
          type: string
          description: Original payment identifier
        amount:
          type: integer
          description: Refund amount
        status:
          type: string
          enum: [pending, completed, failed]
          description: Refund status
        reason:
          type: string
          description: Refund reason
        createdAt:
          type: string
          format: date-time
          description: Refund creation timestamp
      required: [id, paymentId, amount, status, reason, createdAt]

    WebhookRequest:
      type: object
      description: Webhook endpoint registration
      properties:
        url:
          type: string
          format: uri
          description: Webhook endpoint URL
        events:
          type: array
          items:
            type: string
            enum: [payment.completed, payment.failed, refund.completed, customer.created]
          description: Events to subscribe to
        secret:
          type: string
          minLength: 16
          description: Secret key for webhook signature verification
      required: [url, events]

    Webhook:
      type: object
      description: Registered webhook endpoint
      properties:
        id:
          type: string
          description: Unique webhook identifier
        url:
          type: string
          format: uri
          description: Webhook endpoint URL
        events:
          type: array
          items:
            type: string
          description: Subscribed events
        status:
          type: string
          enum: [active, inactive]
          description: Webhook status
        createdAt:
          type: string
          format: date-time
          description: Webhook creation timestamp
      required: [id, url, events, status, createdAt]

    PaymentError:
      type: object
      description: Payment processing error details
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message
        details:
          type: string
          description: Additional error details
        declineCode:
          type: string
          description: Payment decline reason code
      required: [code, message]

    Error:
      type: object
      description: General error response
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code
            message:
              type: string
              description: Error message
            details:
              type: string
              description: Additional error details
          required: [code, message]
      required: [error]

  responses:
    BadRequest:
      description: Bad request - invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication

    oauth2:
      type: oauth2
      description: OAuth2 authorization
      flows:
        authorizationCode:
          authorizationUrl: https://auth.payments.example.com/oauth/authorize
          tokenUrl: https://auth.payments.example.com/oauth/token
          scopes:
            read:payments: Read payment information
            write:payments: Process payments and refunds
            read:customers: Read customer information
            write:customers: Create and update customers